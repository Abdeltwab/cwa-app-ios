////
// ðŸ¦  Corona-Warn-App
//

import OpenCombine

enum EventStoringError: Error {
	case database(SQLiteErrorCode)
	case timeout
}

protocol EventStoring {

	typealias IdResult = Result<Int, EventStoringError>
	typealias VoidResult = Result<Void, EventStoringError>

	@discardableResult
	func createEvent(
		id: String, // The ID of the event. Note that the ID is generated by the CWA server. It is stored as base64-encoded string of the guid attribute of Protocol Buffer message Event.
		description: String,
		start: Date,
		end: Date,
		defaultCheckInLengthInMinutes: Int,
		signature: String // The signature of the event (provided by the CWA server). It is stored as a base64-encoded string of the signature attribute of Protocol Buffer message SignedEvent.
	) -> VoidResult

	@discardableResult
	func deleteEvent(
		id: String
	) -> VoidResult

	@discardableResult
	func createCheckin(
		eventId: String,
		start: Int, // The start of the check-in as 10-minute intervals UNIX time (timestamp in seconds / 600)
		end: Int // The end of the check-in as 10-minute intervals UNIX time (timestamp in seconds / 600)
	) -> IdResult

	@discardableResult
	func deleteCheckin(
		id: Int
	) -> VoidResult

	@discardableResult
	func updateCheckin(
		id: Int,
		start: Int,
		end: Int
	) -> VoidResult
}

protocol EventProviding {
	var eventsPublisher: OpenCombine.CurrentValueSubject<[Event], Never> { get }
	var checkingPublisher: OpenCombine.CurrentValueSubject<[Checkin], Never> { get }
}
