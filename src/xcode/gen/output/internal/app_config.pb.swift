// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/app_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// This file is auto-generated, DO NOT make any changes here

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SAP_Internal_ApplicationConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var minRiskScore: Int32 = 0

  var riskScoreClasses: SAP_Internal_RiskScoreClassification {
    get {return _riskScoreClasses ?? SAP_Internal_RiskScoreClassification()}
    set {_riskScoreClasses = newValue}
  }
  /// Returns true if `riskScoreClasses` has been explicitly set.
  var hasRiskScoreClasses: Bool {return self._riskScoreClasses != nil}
  /// Clears the value of `riskScoreClasses`. Subsequent reads from it will return its default value.
  mutating func clearRiskScoreClasses() {self._riskScoreClasses = nil}

  var exposureConfig: SAP_Internal_RiskScoreParameters {
    get {return _exposureConfig ?? SAP_Internal_RiskScoreParameters()}
    set {_exposureConfig = newValue}
  }
  /// Returns true if `exposureConfig` has been explicitly set.
  var hasExposureConfig: Bool {return self._exposureConfig != nil}
  /// Clears the value of `exposureConfig`. Subsequent reads from it will return its default value.
  mutating func clearExposureConfig() {self._exposureConfig = nil}

  var attenuationDuration: SAP_Internal_AttenuationDuration {
    get {return _attenuationDuration ?? SAP_Internal_AttenuationDuration()}
    set {_attenuationDuration = newValue}
  }
  /// Returns true if `attenuationDuration` has been explicitly set.
  var hasAttenuationDuration: Bool {return self._attenuationDuration != nil}
  /// Clears the value of `attenuationDuration`. Subsequent reads from it will return its default value.
  mutating func clearAttenuationDuration() {self._attenuationDuration = nil}

  var appVersion: SAP_Internal_ApplicationVersionConfiguration {
    get {return _appVersion ?? SAP_Internal_ApplicationVersionConfiguration()}
    set {_appVersion = newValue}
  }
  /// Returns true if `appVersion` has been explicitly set.
  var hasAppVersion: Bool {return self._appVersion != nil}
  /// Clears the value of `appVersion`. Subsequent reads from it will return its default value.
  mutating func clearAppVersion() {self._appVersion = nil}

  var appFeatures: SAP_Internal_AppFeatures {
    get {return _appFeatures ?? SAP_Internal_AppFeatures()}
    set {_appFeatures = newValue}
  }
  /// Returns true if `appFeatures` has been explicitly set.
  var hasAppFeatures: Bool {return self._appFeatures != nil}
  /// Clears the value of `appFeatures`. Subsequent reads from it will return its default value.
  mutating func clearAppFeatures() {self._appFeatures = nil}

  var supportedCountries: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _riskScoreClasses: SAP_Internal_RiskScoreClassification? = nil
  fileprivate var _exposureConfig: SAP_Internal_RiskScoreParameters? = nil
  fileprivate var _attenuationDuration: SAP_Internal_AttenuationDuration? = nil
  fileprivate var _appVersion: SAP_Internal_ApplicationVersionConfiguration? = nil
  fileprivate var _appFeatures: SAP_Internal_AppFeatures? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP.internal"

extension SAP_Internal_ApplicationConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplicationConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "minRiskScore"),
    2: .same(proto: "riskScoreClasses"),
    3: .same(proto: "exposureConfig"),
    4: .same(proto: "attenuationDuration"),
    5: .same(proto: "appVersion"),
    6: .same(proto: "appFeatures"),
    7: .same(proto: "supportedCountries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.minRiskScore)
      case 2: try decoder.decodeSingularMessageField(value: &self._riskScoreClasses)
      case 3: try decoder.decodeSingularMessageField(value: &self._exposureConfig)
      case 4: try decoder.decodeSingularMessageField(value: &self._attenuationDuration)
      case 5: try decoder.decodeSingularMessageField(value: &self._appVersion)
      case 6: try decoder.decodeSingularMessageField(value: &self._appFeatures)
      case 7: try decoder.decodeRepeatedStringField(value: &self.supportedCountries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minRiskScore != 0 {
      try visitor.visitSingularInt32Field(value: self.minRiskScore, fieldNumber: 1)
    }
    if let v = self._riskScoreClasses {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._exposureConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._attenuationDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._appVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._appFeatures {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.supportedCountries.isEmpty {
      try visitor.visitRepeatedStringField(value: self.supportedCountries, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_Internal_ApplicationConfiguration, rhs: SAP_Internal_ApplicationConfiguration) -> Bool {
    if lhs.minRiskScore != rhs.minRiskScore {return false}
    if lhs._riskScoreClasses != rhs._riskScoreClasses {return false}
    if lhs._exposureConfig != rhs._exposureConfig {return false}
    if lhs._attenuationDuration != rhs._attenuationDuration {return false}
    if lhs._appVersion != rhs._appVersion {return false}
    if lhs._appFeatures != rhs._appFeatures {return false}
    if lhs.supportedCountries != rhs.supportedCountries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
